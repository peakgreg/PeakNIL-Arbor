# EC2 Deployment Workflow
#
# Overview:
# This workflow automates deployment of a web application to an Amazon EC2 instance,
# separating public content from application code for improved security.
#
# Trigger: Push to main branch
# Environment: Ubuntu Latest
#
# Detailed Process:
# 1. Repository Checkout
#    - Fetches repository code using actions/checkout@v2
#
# 2. SSH Key Creation
#    - Creates private key file from EC2_PRIVATE_KEY secret
#    - Sets 600 permissions for SSH usage
#
# 3. Connection Testing
#    - Verifies connectivity to EC2 instance
#
# 4. Directory Preparation
#    - Creates and sets ownership for:
#      - /var/www/html (public web root)
#      - /var/www (protected application code)
#
# 5. File Deployment - Split Structure
#    - Public Content: Copies /public directory to /var/www/html/
#    - Application Code: Copies other files to /var/www/
#    - Excluded Files/Directories:
#      - .git* files and directories
#      - .github directory
#      - /database directory
#      - .clinerules
#      - .gitattributes and .gitignore
#
# 6. Composer Dependencies Installation
#    - Runs composer install in production mode
#    - Installs packages to /var/www/vendor
#
# 7. Permission Management
#    - Sets 755 for directories (rwxr-xr-x)
#    - Sets 644 for files (rw-r--r--)
#
# 8. PHP Cache Clearing
#    - Clears OPcache and APCu if available
#
# 9. Service Restart
#    - Restarts PHP services (PHP-FPM or PHP)
#    - Restarts Apache web server
#
# 10. File Cache Refresh
#    - Touches all PHP files to refresh file-based caches
#
# 11. Cleanup
#    - Removes temporary private key file
#
# Required Secrets:
# - EC2_PRIVATE_KEY: SSH private key for EC2 access
# - EC2_USER: Username for EC2 connection
# - EC2_HOST: Hostname or IP address of EC2 instance
#
name: EC2 Deployment
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Create SSH key
        env:
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          echo "$EC2_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
      - name: Deploy to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          # Test connection
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "echo 'Connection successful!'"
          
          # Ensure both directories exist and set permissions
          ssh -i private_key.pem $EC2_USER@$EC2_HOST "
            sudo mkdir -p /var/www/html &&
            sudo mkdir -p /var/www &&
            sudo chown -R $EC2_USER:$EC2_USER /var/www/html &&
            sudo chown -R $EC2_USER:$EC2_USER /var/www
          "
          
          # Copy public directory contents to /var/www/html
          echo "Uploading /public contents to /var/www/html..."
          rsync -av --exclude='.git*' --exclude='private_key.pem' -e "ssh -i private_key.pem" ./public/ $EC2_USER@$EC2_HOST:/var/www/html/
          
          # Copy everything else (excluding public directory) to /var/www
          echo "Uploading non-public files to /var/www..."
          rsync -av \
            --exclude='.git*' \
            --exclude='.gitattributes' \
            --exclude='.gitignore' \
            --exclude='private_key.pem' \
            --exclude='public' \
            --exclude='.github' \
            --exclude='database' \
            --exclude='.clinerules' \
            -e "ssh -i private_key.pem" \
            ./ $EC2_USER@$EC2_HOST:/var/www/
          
          # Check for Composer and install if needed, then run Composer install
          echo "Checking for Composer and installing dependencies..."
          ssh -i private_key.pem $EC2_USER@$EC2_HOST "
            # Check if Composer is installed
            if ! command -v composer &> /dev/null; then
              echo 'Composer not found, installing...'
              # Create directory for Composer
              mkdir -p ~/.composer
              
              # Download Composer installer
              curl -sS https://getcomposer.org/installer -o composer-setup.php
              
              # Install Composer globally
              sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer
              
              # Clean up installer
              rm composer-setup.php
              
              echo 'Composer installed successfully!'
            else
              echo 'Composer is already installed'
            fi
            
            # Install dependencies
            cd /var/www &&
            composer install \
              --no-dev \
              --classmap-authoritative \
              --no-interaction \
              --prefer-dist
          "
          
          # Set proper permissions and verify files
          ssh -i private_key.pem $EC2_USER@$EC2_HOST "
            echo 'Uploaded files to /var/www/html:' &&
            ls -la /var/www/html/ &&
            echo 'Uploaded files to /var/www:' &&
            ls -la /var/www/ &&
            echo 'Installed vendor dependencies:' &&
            ls -la /var/www/vendor/ &&
            sudo chmod -R 755 /var/www/html/ &&
            sudo chmod -R 755 /var/www/ &&
            sudo find /var/www/html/ -type f -exec chmod 644 {} \; &&
            sudo find /var/www/ -type f -exec chmod 644 {} \;
          "
          
          # Clear PHP caches and restart services
          ssh -i private_key.pem $EC2_USER@$EC2_HOST "
            echo 'Clearing PHP caches and restarting services...' &&
            # Clear OPcache if enabled
            if php -r 'echo (int)function_exists(\"opcache_reset\");'; then
              php -r 'opcache_reset();'
              echo 'OPcache cleared successfully!'
            fi &&
            # Clear APCu cache if installed
            if php -r 'echo (int)function_exists(\"apcu_clear_cache\");'; then
              php -r 'apcu_clear_cache();'
              echo 'APCu cache cleared successfully!'
            fi &&
            # Force restart PHP services regardless of current status
            echo 'Restarting PHP services...' &&
            # Try PHP-FPM restart (common in modern setups)
            sudo systemctl restart php*-fpm 2>/dev/null || echo 'No PHP-FPM service found' &&
            # Try PHP service restart (for systems using traditional PHP module)
            sudo service php* restart 2>/dev/null || echo 'No PHP service found' &&
            # Force restart Apache regardless of current status
            echo 'Restarting Apache...' &&
            sudo systemctl restart apache2 2>/dev/null || sudo service apache2 restart 2>/dev/null || echo 'Apache restart attempted' &&
            # Clear PHP file cache by touching files if needed
            find /var/www/html -name '*.php' -exec touch {} \; &&
            find /var/www -name '*.php' -exec touch {} \; &&
            echo 'PHP files touched to refresh file cache' &&
            echo 'PHP cache clearing and service restarts completed!'
          "
          
          echo "Deployment completed successfully!"
      - name: Cleanup
        if: always()
        run: |
          rm -f private_key.pem
          echo "Cleanup completed"