name: Deploy to EC2
on:
  push:
    branches:
      - main  # Trigger deployment on pushes to the main branch
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3  # Check out the code from the repository
      
      - name: Deploy to EC2
        env:
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          # Create the private key file from the secret
          echo "$EC2_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Ensure the correct directory structure exists with proper ownership
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "sudo mkdir -p /var/www/public && sudo chown ec2-user:ec2-user /var/www && sudo chown apache:apache /var/www/public"
          
          # Use rsync to deploy the code to EC2
          rsync -avz --delete --omit-dir-times --no-perms --no-owner --no-group \
          --exclude='.git/' \
          --exclude='.github/' \
          --exclude='.docs/' \
          --exclude='private_key.pem' \
          --exclude='test.php' \
          --exclude='.env.example' \
          --exclude='.gitattributes' \
          --exclude='.gitignore' \
          --exclude='.DS_Store' \
          -e "ssh -o StrictHostKeyChecking=no -i private_key.pem" \
          ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/ || [ $? -eq 23 ]
          
          # Run Composer install only if composer.json or composer.lock has changed
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "cd /var/www/ && 
          if [ -f 'composer.json.md5' ] && [ -f 'composer.lock.md5' ]; then
            OLD_JSON_MD5=\$(cat composer.json.md5)
            OLD_LOCK_MD5=\$(cat composer.lock.md5)
            NEW_JSON_MD5=\$(md5sum composer.json | awk '{print \$1}')
            NEW_LOCK_MD5=\$(md5sum composer.lock | awk '{print \$1}')
            
            if [ \"\$OLD_JSON_MD5\" != \"\$NEW_JSON_MD5\" ] || [ \"\$OLD_LOCK_MD5\" != \"\$NEW_LOCK_MD5\" ]; then
              echo 'Composer files changed. Installing dependencies...'
              composer install --no-dev --optimize-autoloader
              md5sum composer.json | awk '{print \$1}' > composer.json.md5
              md5sum composer.lock | awk '{print \$1}' > composer.lock.md5
            else
              echo 'No changes to composer files. Skipping installation.'
            fi
          else
            echo 'First deployment or MD5 files missing. Installing dependencies...'
            composer install --no-dev --optimize-autoloader
            md5sum composer.json | awk '{print \$1}' > composer.json.md5
            md5sum composer.lock | awk '{print \$1}' > composer.lock.md5
          fi"
          
          # Optional: Clear Composer cache to save space
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "composer clear-cache"
          
          # Delete composer.json and composer.lock from the production server
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "rm -f /var/www/composer.json /var/www/composer.lock"
          
          # Keep ownership as ec2-user for main directory, but set apache for public
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "sudo chown -R ec2-user:ec2-user /var/www && sudo chown -R apache:apache /var/www/public"
          
          # Clean up private key on EC2 server
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "rm -f /var/www/private_key.pem"
          
          # Verify directory structure and permissions
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "ls -ld /var/www /var/www/public"
          
          # 2. Check Apache configuration for AllowOverride settings
          echo "Checking Apache AllowOverride settings..."
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "sudo grep -r 'AllowOverride' /etc/httpd/conf/ /etc/httpd/conf.d/"
          
          # 3. Create a simple test.php file to verify PHP is working
          echo "Creating test.php file..."
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo '<?php phpinfo(); ?>' > /var/www/public/test.php && sudo chown apache:apache /var/www/public/test.php && sudo chmod 644 /var/www/public/test.php"
          
          # 4. Check PHP error log
          echo "Checking PHP error log..."
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "sudo tail -n 50 /var/log/php-fpm/error.log || sudo tail -n 50 /var/log/php/error.log || echo 'PHP error log not found in standard locations'"
          
          # 5. Check Apache error log
          echo "Checking Apache error log..."
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "sudo tail -n 50 /var/log/httpd/error_log || sudo tail -n 50 /var/log/apache2/error.log || echo 'Apache error log not found in standard locations'"
      
      - name: Cleanup
        if: always()  # This ensures the step runs even if previous steps fail
        run: |
          # Print working directory and list files
          pwd
          ls -la
          # Try multiple cleanup methods
          rm -f private_key.pem
          find . -name "private_key.pem" -exec rm -f {} \;
          find /home/runner/work -name "private_key.pem" -exec rm -f {} \;
          # Verify deletion
          ls -la private_key.pem || echo "File not found - successfully deleted"