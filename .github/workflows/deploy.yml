# EC2 Deployment Workflow
#
# Overview:
# This workflow automates deployment of a web application to an Amazon EC2 instance,
# using a temporary directory approach to handle permission issues.
#
# Trigger: Push to main branch
# Environment: Ubuntu Latest
#
name: EC2 Deployment
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Create SSH key
        env:
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          echo "$EC2_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
      - name: Deploy to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          # Test connection
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "echo 'Connection successful!'"
          
          # Create a temporary directory in the user's home directory
          echo "Creating temporary directory for deployment..."
          ssh -i private_key.pem $EC2_USER@$EC2_HOST "mkdir -p ~/temp_deploy"
          
          # Upload all files to the temporary directory
          echo "Uploading repository contents to temporary directory..."
          rsync -av \
            --exclude='.git*' \
            --exclude='.gitattributes' \
            --exclude='.gitignore' \
            --exclude='private_key.pem' \
            --exclude='docs' \
            --exclude='.github' \
            --exclude='database' \
            --exclude='.clinerules' \
            -e "ssh -i private_key.pem" \
            ./ $EC2_USER@$EC2_HOST:~/temp_deploy/
          
          # Use sudo to deploy from temporary directory to /var/www
          echo "Deploying from temporary directory to /var/www..."
          ssh -i private_key.pem $EC2_USER@$EC2_HOST "
            # Get the Apache web server user (could be www-data, apache, etc.)
            WEB_USER=\$(ps aux | grep -E '(apache|httpd|apache2)' | grep -v 'grep' | head -1 | awk '{print \$1}')
            if [ -z \"\$WEB_USER\" ]; then
              # Default to www-data if we couldn't detect it
              WEB_USER='www-data'
              echo 'Could not detect web server user, defaulting to www-data'
            else
              echo \"Detected web server user: \$WEB_USER\"
            fi
            
            # Ensure the /var/www directory exists
            sudo mkdir -p /var/www
            sudo mkdir -p /var/www/public
            
            # Copy files from temp directory to /var/www
            sudo cp -r ~/temp_deploy/* /var/www/
            
            # Set ownership to current user and web server group
            sudo chown -R $EC2_USER /var/www
            sudo chgrp -R \$WEB_USER /var/www
            
            # Set directory permissions
            sudo find /var/www -type d -exec chmod 750 {} \;
            sudo find /var/www/public -type d -exec chmod 755 {} \;
            
            # Set file permissions
            sudo find /var/www -type f -exec chmod 640 {} \;
            sudo find /var/www/public -type f -exec chmod 644 {} \;
            
            # Make scripts executable
            sudo find /var/www -name '*.sh' -exec chmod 750 {} \;
            
            # Clean up temporary directory
            rm -rf ~/temp_deploy
            
            # Verify deployment
            echo 'Deployment files:'
            ls -la /var/www/
          "
          
          # Check for Composer and install if needed, then run Composer install
          echo "Installing Composer dependencies..."
          ssh -i private_key.pem $EC2_USER@$EC2_HOST "
            # Check if Composer is installed
            if ! command -v composer &> /dev/null; then
              echo 'Composer not found, installing...'
              # Create directory for Composer
              mkdir -p ~/.composer
              
              # Download Composer installer
              curl -sS https://getcomposer.org/installer -o composer-setup.php
              
              # Install Composer globally
              sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer
              
              # Clean up installer
              rm composer-setup.php
              
              echo 'Composer installed successfully!'
            else
              echo 'Composer is already installed'
            fi
            
            # Install dependencies
            cd /var/www &&
            composer install \
              --no-dev \
              --classmap-authoritative \
              --no-interaction \
              --prefer-dist
          "
          
          # Clear PHP caches and restart services
          echo "Clearing caches and restarting services..."
          ssh -i private_key.pem $EC2_USER@$EC2_HOST "
            # Clear OPcache if enabled
            if php -r 'echo (int)function_exists(\"opcache_reset\");'; then
              php -r 'opcache_reset();'
              echo 'OPcache cleared successfully!'
            fi
            
            # Clear APCu cache if installed
            if php -r 'echo (int)function_exists(\"apcu_clear_cache\");'; then
              php -r 'apcu_clear_cache();'
              echo 'APCu cache cleared successfully!'
            fi
            
            # Restart PHP services
            sudo systemctl restart php*-fpm 2>/dev/null || echo 'No PHP-FPM service found'
            sudo service php* restart 2>/dev/null || echo 'No PHP service found'
            
            # Restart Apache
            sudo systemctl restart apache2 2>/dev/null || sudo service apache2 restart 2>/dev/null || echo 'Apache restart attempted'
            
            # Touch PHP files to refresh file cache
            sudo find /var/www -name '*.php' -exec touch {} \;
            echo 'PHP files touched to refresh file cache'
          "
          
          echo "Deployment completed successfully!"
      - name: Cleanup
        if: always()
        run: |
          rm -f private_key.pem
          echo "Cleanup completed"